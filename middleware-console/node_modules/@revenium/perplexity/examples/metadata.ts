import { PerplexityReveniumMiddleware } from "../src";

async function metadataRequest() {
  console.log("=".repeat(50));
  try {
    const middleware = new PerplexityReveniumMiddleware();
    const model = middleware.getGenerativeModel("sonar-pro");
    const result = await model.createChatCompletion({
      model: "sonar-pro",
      messages: [{ role: "user", content: "What is the capital of France?" }],
      usageMetadata: {
        taskType: "test",
        subscriberEmail: "test@revenium.ai",
        subscriberId: "123456",
        subscriberCredentialName: "apiKey",
        subscriberCredential: "keyValue",
        organizationId: "123456",
        subscriptionId: "123456",
        productId: "free-trial",
        agent: "perplexity",
        responseQualityScore: 100,
        transactionId: "123456",
        timeToFirstToken: 1000,
        requestTime: new Date(),
        completionStartTime: new Date(),
        operationType: "CHAT",
        inputTokenCount: 10,
        outputTokenCount: 10,
        reasoningTokenCount: 20,
        cacheCreationTokenCount: 0,
        cacheReadTokenCount: 0,
        totalTokenCount: 40,
        responseTime: new Date(),
        requestDuration: 1000,
        stopReason: "END",
      },
    });
    console.log("[METADATA REQUEST]", result.choices[0].message);
  } catch (error) {
    console.log(error);
  }
}
metadataRequest();
