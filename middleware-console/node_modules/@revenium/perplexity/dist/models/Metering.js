"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metering = void 0;
const utils_1 = require("../utils");
const calculateDurationMs_1 = require("../utils/calculateDurationMs");
const formatTimestamp_1 = require("../utils/formatTimestamp");
const generateTransactionId_1 = require("../utils/generateTransactionId");
const Logger_1 = require("./Logger");
class Metering {
    constructor(clientApiKey, clientEndpoint) {
        this.endpoint = "";
        this.apiKey = "";
        this.sendMeteringData = async (metering) => {
            try {
                const response = await fetch(`${this.endpoint}/v2/ai/completions`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "x-api-key": this.apiKey,
                        accept: "application/json",
                    },
                    body: JSON.stringify(metering),
                });
                if (!response.ok) {
                    const errorData = await (response === null || response === void 0 ? void 0 : response.text());
                    Logger_1.logger.error(`Metering API request failed with status ${response.status} - ${errorData}`);
                    return;
                }
                Logger_1.logger.info(`Metering data sent successfully to Revenium`);
            }
            catch (error) {
                Logger_1.logger.error(`Error to sent metering data ${error}`);
            }
        };
        this.apiKey = clientApiKey;
        this.endpoint = clientEndpoint;
    }
    createMetering(metering, isStreamed) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const usageMetadata = metering.usageMetadata;
        const agent = "perplexity";
        return {
            stopReason: (_a = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.stopReason) !== null && _a !== void 0 ? _a : metering.stopReason,
            costType: utils_1.COST_TYPE,
            isStreamed,
            taskType: utils_1.COST_TYPE,
            agent: (_b = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.agent) !== null && _b !== void 0 ? _b : agent,
            operationType: (_c = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.operationType) !== null && _c !== void 0 ? _c : metering.operationType.toString(),
            inputTokenCount: (_d = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.inputTokenCount) !== null && _d !== void 0 ? _d : metering.tokenCounts.inputTokens,
            outputTokenCount: (_e = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.outputTokenCount) !== null && _e !== void 0 ? _e : metering.tokenCounts.outputTokens,
            reasoningTokenCount: (_g = (_f = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.reasoningTokenCount) !== null && _f !== void 0 ? _f : metering.tokenCounts.reasoningTokens) !== null && _g !== void 0 ? _g : 0,
            cacheCreationTokenCount: (_j = (_h = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.cacheCreationTokenCount) !== null && _h !== void 0 ? _h : metering.tokenCounts.cachedTokens) !== null && _j !== void 0 ? _j : 0,
            cacheReadTokenCount: (_k = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.cacheReadTokenCount) !== null && _k !== void 0 ? _k : 0,
            totalTokenCount: (_l = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.totalTokenCount) !== null && _l !== void 0 ? _l : metering.tokenCounts.totalTokens,
            organizationId: (_m = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.organizationId) !== null && _m !== void 0 ? _m : `my-customer-name-${(0, generateTransactionId_1.generateTransactionId)()}`,
            productId: (_o = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.productId) !== null && _o !== void 0 ? _o : utils_1.PRODUCT_ID_FREE,
            subscriber: {
                id: (_p = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.subscriberId) !== null && _p !== void 0 ? _p : `user-${(0, generateTransactionId_1.generateTransactionId)()}`,
                email: (_q = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.subscriberEmail) !== null && _q !== void 0 ? _q : `user-@${agent.toLowerCase()}.ai`,
                credential: (usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.subscriberCredentialName) &&
                    (usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.subscriberCredential)
                    ? {
                        name: usageMetadata.subscriberCredentialName,
                        value: usageMetadata.subscriberCredential,
                    }
                    : utils_1.CURRENT_CREDENTIAL,
            },
            model: metering.modelName,
            transactionId: (_r = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.transactionId) !== null && _r !== void 0 ? _r : (0, generateTransactionId_1.generateTransactionId)(),
            responseTime: (0, formatTimestamp_1.formatTimestamp)(metering.endTime),
            requestDuration: (0, calculateDurationMs_1.calculateDurationMs)(metering.startTime, metering.endTime),
            provider: agent,
            requestTime: (_t = (_s = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.requestTime) === null || _s === void 0 ? void 0 : _s.toString()) !== null && _t !== void 0 ? _t : (0, formatTimestamp_1.formatTimestamp)(metering.startTime),
            completionStartTime: (_v = (_u = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.completionStartTime) === null || _u === void 0 ? void 0 : _u.toString()) !== null && _v !== void 0 ? _v : (0, formatTimestamp_1.formatTimestamp)(metering.endTime),
            timeToFirstToken: (_w = usageMetadata === null || usageMetadata === void 0 ? void 0 : usageMetadata.timeToFirstToken) !== null && _w !== void 0 ? _w : 0,
            middleware_source: utils_1.MIDDLEWARE_SOURCE,
        };
    }
}
exports.Metering = Metering;
