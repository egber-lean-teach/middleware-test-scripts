"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.Logger = void 0;
const levels_1 = require("../utils/constants/levels");
class Logger {
    constructor() {
        var _a;
        this.logLevel = ((_a = process.env.REVENIUM_LOG_LEVEL) === null || _a === void 0 ? void 0 : _a.toUpperCase()) || "INFO";
    }
    shouldLog(level) {
        const currentLevel = levels_1.levels_array.indexOf(this.logLevel);
        const messageLevel = levels_1.levels_array.indexOf(level);
        return messageLevel >= currentLevel;
    }
    formatMessage(level, message, ...args) {
        const timestamp = new Date().toISOString();
        const prefix = `[${timestamp}] [Revenium] [${level}]`;
        if (args.length > 0) {
            return `${prefix} ${message} ${args
                .map((arg) => typeof arg === "object" ? JSON.stringify(arg, null, 2) : String(arg))
                .join(" ")}`;
        }
        return `${prefix} ${message}`;
    }
    debug(message, ...args) {
        if (this.shouldLog(levels_1.LEVELS.DEBUG)) {
            console.debug(this.formatMessage(levels_1.LEVELS.DEBUG, message, ...args));
        }
    }
    info(message, ...args) {
        if (this.shouldLog(levels_1.LEVELS.INFO)) {
            console.info(this.formatMessage(levels_1.LEVELS.INFO, message, ...args));
        }
    }
    warning(message, ...args) {
        if (this.shouldLog(levels_1.LEVELS.WARNING)) {
            console.warn(this.formatMessage(levels_1.LEVELS.WARNING, message, ...args));
        }
    }
    error(message, ...args) {
        if (this.shouldLog(levels_1.LEVELS.ERROR)) {
            console.error(this.formatMessage(levels_1.LEVELS.ERROR, message, ...args));
        }
    }
    setLogLevel(level) {
        if (levels_1.levels_array.includes(level.toUpperCase())) {
            this.logLevel = level.toUpperCase();
        }
        else {
            this.warning(`Invalid log level: ${level}. Using INFO instead.`);
            this.logLevel = levels_1.LEVELS.INFO;
        }
    }
    getLogLevel() {
        return this.logLevel;
    }
}
exports.Logger = Logger;
const logger = new Logger();
exports.logger = logger;
//# sourceMappingURL=Logger.js.map